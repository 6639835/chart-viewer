name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
            artifact_name: mac
          - os: ubuntu-latest
            platform: linux
            artifact_name: linux
          - os: windows-latest
            platform: win
            artifact_name: windows

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Clean build directories
        shell: bash
        run: |
          rm -rf .next
          rm -rf dist
          rm -rf out

      - name: Build Next.js app
        run: npm run build
        env:
          NODE_ENV: production

      - name: Decode and import certificate (macOS)
        if: matrix.os == 'macos-latest' && secrets.CERTIFICATE_BASE64 != ''
        run: |
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -d user -s ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain
        env:
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run electron:build:mac -- --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.CERTIFICATE_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          CSC_IDENTITY_AUTO_DISCOVERY: ${{ secrets.CERTIFICATE_BASE64 != '' }}

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run electron:build:win -- --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run electron:build:linux -- --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: chart-viewer-${{ matrix.artifact_name }}
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.blockmap
            dist/latest*.yml
          retention-days: 7

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: chart-viewer-${{ matrix.artifact_name }}
          path: |
            dist/*.exe
            dist/*.blockmap
            dist/latest*.yml
          retention-days: 7

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: chart-viewer-${{ matrix.artifact_name }}
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.blockmap
            dist/latest*.yml
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
